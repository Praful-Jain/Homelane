from django.db import models

class CustomerProfile(models.Model):
    GENDER_CHOICES = [('male', 'Male'), ('female', 'Female'), ('others', 'Others')]
    LANGUAGE_CHOICES = [
        ('English', 'English'), ('Hindi', 'Hindi'), ('Kannada', 'Kannada'),('Tamil', 'Tamil'), ('Marathi', 'Marathi'), 
        ('Bengali', 'Bengali'), ('Punjabi', 'Punjabi'), ('Malayalam', 'Malayalam'), ('Telugu', 'Telugu'), ('Urdu', 'Urdu')
    ]

    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=255)
    email = models.EmailField(unique=True)
    secondary_email = models.EmailField(blank=True, null=True)
    password = models.CharField(max_length=255, blank=True, null=True)
    country_code = models.CharField(max_length=10, default='91', help_text='Country code')
    country_name = models.CharField(max_length=100, blank=True, null=True)
    mobile = models.PositiveBigIntegerField(null=True, blank=True)
    alt_mobile = models.PositiveBigIntegerField(blank=True, null=True)
    profile_pic = models.URLField(blank=True, null=True)
    gender = models.CharField(max_length=6, choices=GENDER_CHOICES, blank=True, null=True)
    dob = models.DateField(blank=True, null=True)
    primary_language = models.CharField(max_length=10, choices=LANGUAGE_CHOICES, blank=True, null=True, help_text='Primary language of the user')
    secondary_language = models.CharField(max_length=10, choices=LANGUAGE_CHOICES, blank=True, null=True, help_text='Secondary language of the user')
    blitz_user = models.BooleanField(default=False)
    last_visit = models.DateTimeField(blank=True, null=True)
    last_login = models.CharField(max_length=40, blank=True, null=True, help_text='Last login details for website api')
    forgot_password_code = models.CharField(max_length=255, blank=True, null=True)
    google_id = models.CharField(max_length=255, blank=True, null=True)
    google_user = models.CharField(max_length=3, choices=[('Yes', 'Yes'), ('No', 'No')], default='No')
    fb_id = models.CharField(max_length=255, blank=True, null=True)
    fb_user = models.CharField(max_length=3, choices=[('Yes', 'Yes'), ('No', 'No')], default='No')
    email_support = models.BooleanField(default=True)
    sms_support = models.BooleanField(default=False)
    whatsapp_support = models.BooleanField(default=False)
    sap_account_id = models.BigIntegerField(blank=True, null=True)
    sf_account_id = models.CharField(max_length=255, blank=True, null=True)
    sf_customer_account_id = models.CharField(max_length=255, blank=True, null=True)
    referral_code = models.CharField(max_length=255, blank=True, null=True)
    referred_by = models.IntegerField(blank=True, null=True)
    account_notifications = models.CharField(max_length=255, default='0', help_text='1- My project, 2 - Cart, 3 - Both, 0 - None')
    logged_in_hlstore = models.BooleanField(default=False)
    otp_retry_count = models.IntegerField(default=0)
    is_deleted = models.BooleanField(default=False)
    created_by = models.IntegerField(blank=True, null=True)
    created_on = models.DateTimeField(auto_now_add=True)
    modified_by = models.IntegerField(blank=True, null=True)
    modified_on = models.DateTimeField(auto_now=True)
    is_staff = models.BooleanField(default=False)
    is_superuser = models.BooleanField(default=False)
    expiry_email_enabled = models.BooleanField(default=True, help_text='Enable expiry email for customer')

# The Meta class in a Django model allows us to provide additional information about the model to Django.
    class Meta:
        # Django supports the definition of indexes on database fields to improve query performance.
        # Indexing is helpful when filtering or sorting based on particular fields
        indexes = [
            models.Index(fields=['sf_account_id', 'is_deleted']),
            models.Index(fields=['sf_customer_account_id']),
            models.Index(fields=['mobile', 'is_deleted']),
        ]
    
    def __str__(self):
        return str(self.id)

class BackboneCustomerInfo(models.Model):
    APPOINTMENT_TYPE_CHOICES = [
        ('virtualmeeting', 'Virtual Meeting'),
        ('squareshowroomvisit', 'Square Showroom Visit'),
    ]

    STAGE_CHOICES = [
        ('initialQuoteSent', 'Initial Quote Sent'),
        ('paymentStageA', 'Payment Stage A Reached'),
        ('paymentStageB', 'Payment Stage B Reached'),
        ('paymentStageC', 'Payment Stage C Reached'),
        ('paymentDone', 'Payment Done'),
    ]

    id = models.BigAutoField(primary_key=True)
    # cust_id = models.OneToOneField(CustomerProfile, on_delete=models.CASCADE)
    appointment_time = models.DateTimeField(auto_now_add=True)
    appointment_type = models.CharField(max_length=100, choices=APPOINTMENT_TYPE_CHOICES)
    stage = models.CharField(max_length=100, choices=STAGE_CHOICES)
    
    meeting_counter_in_stage_0_10 = models.IntegerField(default=0, blank=True)
    meeting_counter_in_stage_10_40 = models.IntegerField(default=0, blank=True)
    nps_percentage_40 = models.FloatField(null=True, blank=True)
    nps_comments_percentage_40 = models.TextField(null=True, blank=True)
    nps_answers_percentage_40 = models.TextField(null=True, blank=True)
    nps_final = models.IntegerField(null=True, blank=True)
    nps_additional_feedback = models.CharField(max_length=100, null=True, blank=True)
    nps_feedback_question = models.CharField(max_length=100, null=True, blank=True)
    nps_source = models.CharField(max_length=100, null=True, blank=True)
    account_id = models.CharField(max_length=100, null=True, blank=True)
    actual_move_in_date = models.DateTimeField(null=True, blank=True)
    move_in_date = models.DateTimeField(null=True, blank=True)
    actual_possession_date = models.DateTimeField(null=True, blank=True)
    possession_date = models.DateTimeField(null=True, blank=True)
    possession = models.TextField(null=True, blank=True)
    installation_address = models.TextField(null=True, blank=True)
    amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    balance_amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    budget = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    budget_range = models.CharField(max_length=100, null=True, blank=True)
    appointment_fixed_on = models.DateTimeField(null=True, blank=True)
    alternate_appointment_time = models.DateTimeField(null=True, blank=True)
    artifact_id = models.CharField(max_length=100, null=True, blank=True)
    auto_number_for_quote_creation = models.IntegerField(null=True, blank=True)
    blockers = models.TextField(null=True, blank=True)
    residence_visit_status = models.CharField(max_length=100, null=True, blank=True)
    res_visit_venue_acceptance = models.TextField(null=True, blank=True)
    res_visit_venue_city = models.TextField(null=True, blank=True)
    res_visit_venue_landmark = models.TextField(null=True, blank=True)
    res_visit_venue_locality = models.TextField(null=True, blank=True)
    res_visit_venue_state = models.TextField(null=True, blank=True)
    res_visit_venue_street = models.TextField(null=True, blank=True)
    builder_name = models.CharField(max_length=200, null=True, blank=True)
    builder_name_id = models.CharField(max_length=150, null=True, blank=True)
    cc_office = models.TextField(null=True, blank=True)
    channel_partner = models.CharField(max_length=150, null=True, blank=True)
    city = models.CharField(max_length=150, null=True, blank=True)
    closing_date = models.DateTimeField(null=True, blank=True)
    creation_date = models.DateTimeField(null=True, blank=True)
    current_lead_id = models.CharField(max_length=100, null=True, blank=True)
    interior_rating = models.TextField(null=True, blank=True)
    sf_customer_id = models.CharField(max_length=100, null=True, blank=True)
    customer_overall_review = models.TextField(null=True, blank=True)
    customer_profile = models.CharField(max_length=200, null=True, blank=True)
    date_of_completion = models.DateField(null=True, blank=True)
    description = models.TextField(null=True, blank=True)
    design_partner = models.CharField(max_length=100, null=True, blank=True)
    design_partner_sf_id = models.CharField(max_length=150, null=True, blank=True)
    customer_email = models.CharField(max_length=150, null=True, blank=True)
    customer_name = models.CharField(max_length=150, null=True, blank=True)
    customer_mobile = models.CharField(max_length=100, null=True, blank=True)
    area_code = models.IntegerField(default=91, blank=True)
    first_home = models.CharField(max_length=100, null=True, blank=True)
    meeting_start_time = models.DateTimeField(null=True, help_text='Meeting start time', blank=True)
    first_meeting_date = models.DateField(null=True, blank=True)
    floorplan_area = models.CharField(max_length=100, null=True, blank=True)
    builtup_area = models.IntegerField(null=True, blank=True)
    floorplan_received = models.CharField(max_length=100, null=True, blank=True)
    floorplan_url = models.CharField(max_length=200, null=True, blank=True)
    follow_up_time = models.DateTimeField(null=True, blank=True)
    gst = models.CharField(max_length=100, null=True, blank=True)
    how_likely_will_you_recommend_sc = models.CharField(max_length=100, null=True, blank=True)
    installation_city = models.CharField(max_length=100, null=True, blank=True)
    interior_start_date = models.DateTimeField(null=True, blank=True)
    last_contact_date = models.DateTimeField(null=True, blank=True)
    lead_created_date = models.DateTimeField(null=True, blank=True)
    lead_or_opportunity_status = models.CharField(max_length=100, null=True, blank=True)
    lead_source = models.CharField(max_length=100, null=True, blank=True)
    opportunity_status = models.CharField(max_length=255, null=True, blank=True)
    opportunity_sub_status = models.CharField(max_length=255, null=True, blank=True)
    loss_reason = models.TextField(null=True, blank=True)
    meeting_end_time = models.DateTimeField(null=True, blank=True)
    meeting_stage = models.CharField(max_length=100, null=True, blank=True)
    meeting_status = models.CharField(max_length=100, null=True, blank=True)
    offer_proposed = models.CharField(max_length=100, null=True, blank=True)
    opportunity_stage = models.CharField(max_length=100, null=True, blank=True)
    opp_created_date = models.DateTimeField(null=True, blank=True)
    order_amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    order_closed = models.CharField(max_length=100, null=True, blank=True)
    owner = models.CharField(max_length=100, null=True, blank=True)
    owner_sfid = models.CharField(max_length=150, null=True, blank=True)
    priority_lead = models.CharField(max_length=100, null=True, blank=True)
    priority_type = models.CharField(max_length=100, null=True, blank=True)
    probability = models.FloatField(default=0, blank=True)
    probability_of_closure = models.CharField(max_length=100, null=True, blank=True)
    probability_of_closure_percentage = models.DecimalField(max_digits=10, decimal_places=2, default=0.00, blank=True)
    product_type = models.CharField(max_length=100, null=True, blank=True)
    property_address = models.TextField(null=True, blank=True)
    property_config = models.CharField(max_length=100, null=True, blank=True)
    property_name = models.TextField(null=True, blank=True)
    property_name_sfid = models.CharField(max_length=100, null=True, blank=True)
    property_status = models.CharField(max_length=100, null=True, blank=True)
    property_type = models.CharField(max_length=100, null=True, blank=True)
    property_type_of_home_address = models.TextField(null=True, blank=True)
    property_modified_on = models.DateTimeField(null=True, blank=True)
    purpose_of_interiors = models.CharField(max_length=100, null=True, blank=True)
    qualified_lead = models.CharField(max_length=100, null=True, blank=True)
    quote_link = models.TextField(null=True, blank=True)
    quote_sent_DP = models.CharField(max_length=100, null=True, blank=True)
    reach_time = models.DateTimeField(null=True, blank=True)
    referral_dp = models.CharField(max_length=100, null=True, blank=True)
    regional_language = models.CharField(max_length=100, null=True, blank=True)
    request_call_back = models.CharField(max_length=100, null=True, blank=True)
    renovation_services = models.TextField(null=True, blank=True)
    rv_flow_json = models.TextField(null=True, blank=True)
    rv_last_modified = models.DateTimeField(null=True, blank=True)
    sales_description = models.TextField(null=True, blank=True)
    sales_manager = models.CharField(max_length=100, null=True, blank=True)
    sales_manager_email = models.CharField(max_length=100, null=True, blank=True)
    scope_of_work = models.TextField(null=True, blank=True)
    sc_recommended_email = models.CharField(max_length=100, null=True, blank=True)
    secondary_email = models.CharField(max_length=100, null=True, blank=True)
    nearest_showroom_id = models.CharField(max_length=100, null=True, blank=True)
    showroom = models.CharField(max_length=100, null=True, blank=True)
    showroom_agent = models.CharField(max_length=100, null=True, blank=True)
    showroom_manager = models.CharField(max_length=100, null=True, blank=True)
    showroom_sfid = models.CharField(max_length=100, null=True, blank=True)
    sign_up_source = models.CharField(max_length=100, null=True, blank=True)
    stage_flow = models.CharField(max_length=100, null=True, blank=True)
    star_rating = models.CharField(max_length=100, null=True, blank=True)
    sub_status = models.CharField(max_length=100, null=True, blank=True)
    time_of_actual_appointment_start = models.DateTimeField(null=True, blank=True)
    type = models.CharField(max_length=100, null=True, blank=True)
    type_of_meeting = models.CharField(max_length=100, null=True, blank=True)
    user_rv_address = models.TextField(null=True, blank=True)
    user_sf_id = models.CharField(max_length=100, null=True, blank=True)
    wardrobe = models.CharField(max_length=100, null=True, blank=True)
    warranty_document_comments = models.TextField(null=True, blank=True)
    what_did_you_like_most = models.TextField(null=True, blank=True)
    when_is_the_customer_planning_to_visit = models.TextField(null=True, blank=True)
    wt_agent = models.CharField(max_length=100, null=True, blank=True)
    wt_agent_allocated_time = models.DateTimeField(null=True, blank=True)
    wt_agent_sfid = models.CharField(max_length=100, null=True, blank=True)
    assigned_to_resi_asm = models.CharField(max_length=10, null=True, blank=True)
    dead_lead_reason = models.TextField(null=True, blank=True)
    estimate_link = models.TextField(null=True, blank=True)
    checkin_time = models.DateTimeField(null=True, blank=True)
    interior_designer = models.CharField(max_length=20, null=True, blank=True)
    customer_property_name = models.CharField(max_length=255, null=True, blank=True)
    requirements = models.TextField(null=True, blank=True)
    new_close_date = models.DateTimeField(null=True, blank=True)
    new_opportunity_stage = models.CharField(max_length=100, null=True, blank=True)
    new_opportunity_Status = models.CharField(max_length=100, null=True, blank=True)
    hl_referrer_phone = models.CharField(max_length=15, null=True, blank=True)
    quote_sent_time = models.DateTimeField(null=True, blank=True)
    send_emailv2 = models.CharField(max_length=100, null=True, blank=True)
    modular_storage = models.CharField(max_length=10, null=True, blank=True)
    lose_furniture = models.CharField(max_length=10, null=True, blank=True)
    hds = models.CharField(max_length=10, null=True, blank=True)
    how_did_you_hear_about_us = models.TextField(null=True, blank=True)
    residence_visit_offered = models.CharField(max_length=100, null=True, blank=True)
    send_whatsapp = models.TextField(null=True, blank=True)
    second_meeting_url = models.CharField(max_length=255, null=True, blank=True)
    lost_opp = models.CharField(max_length=100, null=True, blank=True)
    last_open_time = models.DateTimeField(null=True, blank=True)
    past_project_url = models.CharField(max_length=255, null=True, blank=True)
    total_quote_views = models.IntegerField(null=True, blank=True)
    quote_reviewed = models.CharField(max_length=10, null=True, blank=True)
    order_book_date = models.DateTimeField(null=True, blank=True)
    second_meeting_link = models.CharField(max_length=255, null=True, blank=True)
    nps_percentage_40_signoff_date = models.DateTimeField(null=True, blank=True)
    requested_callback = models.BooleanField(default=False, blank=True)
    chat_app = models.CharField(max_length=150, null=True, blank=True)
    chat_app_user_name = models.CharField(max_length=150, null=True, blank=True)
    extra_data = models.CharField(max_length=100, null=True, blank=True)
    rainSCVM = models.BooleanField(default=False, blank=True)
    sm_assigned_source = models.CharField(max_length=255, null=True, blank=True)
    first_meeting_completed_source = models.CharField(max_length=255, null=True, blank=True)
    check_in_source = models.CharField(max_length=255, null=True, blank=True)
    is_design_required = models.BooleanField(default=True, blank=True)
    second_meeting_start_time = models.DateTimeField(null=True, blank=True)
    second_meeting_end_time = models.DateTimeField(null=True, blank=True)
    main_order_sf_id = models.CharField(max_length=255, null=True, blank=True)
    sc_launch_flag = models.CharField(max_length=255, null=True, blank=True)
    is_deleted = models.BooleanField(default=False, blank=True)
    created_by = models.IntegerField(blank=True, null=True)
    created_on = models.DateTimeField(auto_now_add=True)
    modified_by = models.IntegerField(blank=True, null=True)
    modified_on = models.DateTimeField(auto_now=True)
    appointment_fixed_date = models.DateTimeField(null=True, help_text='to store appointment_fixed_date_time__c from salesforce webhook', blank=True)
    sc_pro_launch_flag = models.CharField(max_length=80, null=True, blank=True)
    en_sc_options = models.BooleanField(default=True, help_text='Enable SC options Pop up before SC Launch or not', blank=True)
    freelancer = models.CharField(max_length=150, null=True, blank=True)

    class Meta:
        indexes = [
            # models.Index(fields=['cust_id', 'is_deleted']),
            models.Index(fields=['lead_source']),
            models.Index(fields=['appointment_time']),
            models.Index(fields=['nps_percentage_40']),
            models.Index(fields=['move_in_date']),
            models.Index(fields=['sf_customer_id']),
            models.Index(fields=['appointment_type']),
            models.Index(fields=['modified_on']),
        ]
        
    def __str__(self):
        return str(self.id)

class User(models.Model):
    user_id = models.OneToOneField(BackboneCustomerInfo, on_delete=models.CASCADE)
    customer_profile_id = models.ForeignKey(CustomerProfile, on_delete=models.CASCADE)
    
    city = models.CharField(max_length=255, null=True, blank=True, help_text='city of user should not be empty')
    city_id = models.IntegerField(null=True, blank=True)
    pincode = models.IntegerField(null=True, blank=True)
    installation_city_id = models.IntegerField(default=0)
    country = models.IntegerField(null=True, blank=True, help_text='Country id from country table')
    secondary_email = models.CharField(max_length=255, null=True, blank=True)
    alternate_phone_no = models.CharField(max_length=15, null=True, blank=True)
    group_id = models.IntegerField(default=7)
    opportunity_number = models.CharField(max_length=50, null=True, blank=True)
    sm_menu = models.TextField(null=True, blank=True, help_text='For session menu for menu builders')
    sitemax_roles = models.CharField(max_length=750, default='user')
    company = models.IntegerField(choices=[(1, 'capricoast'),(2, 'homelane'),], default=2, help_text='1-capricoast, 2-homelane')
    is_deleted = models.BooleanField(default=False, blank=True)
    created_by = models.IntegerField(blank=True, null=True)
    created_on = models.DateTimeField(auto_now_add=True)
    modified_by = models.IntegerField(blank=True, null=True)
    modified_on = models.DateTimeField(auto_now=True)
    zoho_id = models.CharField(max_length=50, blank=True, null=True)
    sf_lead_id = models.CharField(max_length=50, null=True, blank=True)
    sf_opportunity_id = models.CharField(max_length=50, null=True, blank=True)
    sf_account_id = models.CharField(max_length=50, null=True, blank=True)
    customer_id = models.CharField(max_length=255, null=True, blank=True, help_text='Customer ID is generated in the zoho')
    parent_customer_id = models.CharField(max_length=255, null=True, blank=True)
    is_pro = models.BooleanField(null=True, blank=True, help_text='This flag is used to determine if Customer is Pro or Not')
    meeting_nps_question_id = models.IntegerField(null=True, blank=True)
    meeting_nps_complete = models.BooleanField(default=False)
    brand = models.IntegerField(default=1, help_text='FK of brands table')
    lead_creation_stage = models.CharField(max_length=5, null=True, blank=True, choices=[('10-40', '10-40')])
    type_of_order = models.CharField(max_length=8, default='customer', choices=[('customer', 'customer'), ('showroom', 'showroom')])

    class Meta:
        indexes = [
            models.Index(fields=['sf_lead_id']),
            models.Index(fields=['sf_opportunity_id']),
            models.Index(fields=['customer_id']),
            models.Index(fields=['company']),
            models.Index(fields=['user_id', 'company', 'is_deleted']),
            models.Index(fields=['user_id', 'is_deleted'], name='email_no_delete'),
            models.Index(fields=['modified_on'], name='modified_idx'),
            models.Index(fields=['customer_profile_id', 'is_deleted']),
            models.Index(fields=['meeting_nps_question_id']),
            models.Index(fields=['brand']),
        ]
        
    def __str__(self):
        return str(self.user_id.id)

class Showroom(models.Model):
    showroom_id = models.AutoField(primary_key=True)
    supplier_id = models.IntegerField(unique=True)
    
    showroom_name = models.CharField(max_length=100, default=None, null=True, blank=True)
    description = models.CharField(max_length=255, default=None, null=True, blank=True)
    address = models.TextField(null=True, blank=True)
    location = models.CharField(max_length=225, null=True, blank=True)
    city = models.IntegerField(null=True, blank=True)
    state = models.IntegerField(default=0, null=True, blank=True)
    district = models.IntegerField(default=None, null=True, blank=True)
    pincode = models.CharField(max_length=10, default=None, null=True, blank=True)
    latitude = models.CharField(max_length=100, default=None, null=True, blank=True)
    longitude = models.CharField(max_length=100, default=None, null=True, blank=True)
    sales_district = models.CharField(max_length=30, default=None, null=True, blank=True)
    sales_group = models.CharField(max_length=30, default=None, null=True, blank=True)
    booking_type = models.SmallIntegerField(default=0, help_text='1-physical,2-virtual,3-both,0-none', null=True, blank=True)
    appointment_type = models.CharField(max_length=50, default=None, null=True, blank=True)
    banner_image = models.CharField(max_length=255, default=None, null=True, blank=True, help_text='Banner images for landingpage desktop')
    banner_image_mobile = models.CharField(max_length=255, default=None, null=True, blank=True, help_text='Banner images for landingpage mobile')
    site_cleaning_po = models.BooleanField(default=True)
    calendar_id = models.CharField(max_length=50, default=None, null=True, blank=True)
    fsm_calendar_id = models.CharField(max_length=50, default=None, null=True, blank=True)
    email = models.CharField(max_length=50, default=None, null=True, blank=True)
    phone = models.CharField(max_length=15, default=' ', null=True, blank=True)
    sales_manager = models.CharField(max_length=255, null=True, blank=True)
    showroom_manager = models.CharField(max_length=255, null=True, blank=True)
    delivery_manager = models.CharField(max_length=255, null=True, blank=True)
    design_manager = models.CharField(max_length=255, null=True, blank=True)
    installation_manager = models.CharField(max_length=255, help_text='comma separate values and it will ref user id', null=True, blank=True)
    secondary_phone = models.CharField(max_length=15, default=None, null=True, blank=True)
    contact_person = models.CharField(max_length=100, default=None, null=True, blank=True)
    contact_mobile = models.CharField(max_length=15, default=None, null=True, blank=True)
    contact_email = models.CharField(max_length=100, default=None, null=True, blank=True)
    showroom_timings = models.TextField(help_text='for showroom timings', default=None, null=True, blank=True)
    zoho_id = models.CharField(max_length=255, default=None, null=True, blank=True, help_text='Showroom id in Zoho')
    live_sf_id = models.CharField(max_length=100, default=None, null=True, blank=True)
    sand_sf_id = models.CharField(max_length=100, default=None, null=True, blank=True)
    login_code = models.CharField(max_length=255, default=None, null=True, blank=True, help_text='login code for showroom users')
    type = models.SmallIntegerField(default=1, help_text='1=>Showroom; 2=>Offices; 3=>Offices and Showroom; 4=>Squarelet', null=True, blank=True)
    google_review_place_id = models.CharField(max_length=500, default=None, null=True, blank=True)
    url_3d = models.CharField(max_length=255, default=None, null=True, blank=True)
    is_coworkingspace = models.BooleanField(default=False, help_text='To indicate a coworking space showroom', null=True, blank=True)
    is_deleted = models.IntegerField(default=0, null=True, blank=True)
    active = models.IntegerField(default=None, null=True, blank=True)
    created_on = models.DateTimeField(default=None, null=True, blank=True)
    created_by = models.IntegerField(default=None, null=True, blank=True)
    modified_on = models.DateTimeField(auto_now=True)
    modified_by = models.IntegerField(default=None, null=True, blank=True)
    opened_days = models.CharField(max_length=255, default=None, null=True, blank=True)
    cluster_id = models.CharField(max_length=10, default=None, null=True, blank=True)
    brand = models.IntegerField(default=1, help_text='1- homelane, 2 doowup, 3- pronto', null=True, blank=True)

    class Meta:
        db_table = 'showrooms'
        
    def __str__(self):
        return str(self.supplier_id)

class BackboneCustomerEvent(models.Model):
    cust_id = models.OneToOneField(User, on_delete=models.CASCADE)
    showroom_id = models.ForeignKey(Showroom, on_delete=models.CASCADE)
    
    event_id = models.CharField(max_length=255, null=True, blank=True)
    vendor_id = models.IntegerField(null=True, blank=True)
    dp_id = models.PositiveIntegerField(null=True, blank=True, help_text='DP ID for the customer')
    is_curated_dp = models.CharField(max_length=3, default='No', choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Is the DP a curated DP?')
    dp_selection_reason = models.CharField(max_length=255, null=True, blank=True, help_text='Reason for selecting Non curated DP')
    is_new_dp = models.BooleanField(null=True, blank=True)
    jdp_id = models.IntegerField(null=True, blank=True)
    sc_id = models.IntegerField(null=True, blank=True)
    installation_showroom_id = models.IntegerField(null=True, blank=True)
    pm_id = models.PositiveIntegerField(null=True, blank=True, help_text='Project Manager ID for the customer')
    sm_id = models.PositiveIntegerField(null=True, blank=True, help_text='Iron Man ID for the customer')
    cm_id = models.IntegerField(null=True, blank=True, help_text='Community Manager ID for the customer')
    captain_id = models.IntegerField(null=True, blank=True, help_text='Captain ID for the customer')
    sales_manager_id = models.IntegerField(null=True, blank=True, help_text='Sales Manager ID for the customer')
    im_id = models.IntegerField(null=True, blank=True, help_text='Installation Manager ID for the customer')
    dm_id = models.IntegerField(null=True, blank=True, help_text='Delivery Manager ID for the customer')
    csr_id = models.IntegerField(null=True, blank=True)
    si_id = models.PositiveIntegerField(null=True, blank=True)
    referral_sqp_franchise_id = models.IntegerField(null=True, blank=True)
    is_active = models.BooleanField(default=True)
    is_deleted = models.BooleanField(default=False)
    created_by = models.IntegerField(blank=True, null=True)
    created_on = models.DateTimeField(auto_now_add=True)
    modified_by = models.IntegerField(blank=True, null=True)
    modified_on = models.DateTimeField(auto_now=True)
    mmt_id = models.IntegerField(null=True, blank=True)
    install_qc_id = models.IntegerField(null=True, blank=True)
    bm_id = models.IntegerField(null=True, blank=True, help_text='Business Manager ID for the customer')
    pc_id = models.IntegerField(null=True, blank=True, help_text='Product Consultant ID for the customer')
    dsm_id = models.IntegerField(null=True, blank=True, help_text='Doowup Sales Manager ID for the Customer')
    dealer = models.IntegerField(null=True, blank=True)
    dealer_designer = models.IntegerField(null=True, blank=True)

    class Meta:
        db_table = 'backbone_customer_event'
